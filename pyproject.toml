# ###############
# PROJECT
# ###############
[project]
name = "interloper-workspace"
version = "0.1.0"
description = "The Interloper Project"
readme = "README.md"
requires-python = ">=3.10"

dependencies = [
    "interloper",
    "interloper-assets",
    "interloper-duckdb",
    "interloper-pandas",
    "interloper-google-cloud",
    "interloper-sql",
    "interloper-sqlite",
    "matplotlib>=3.10.0",
    "streamlit>=1.42.2",
    "pyyaml>=6.0.2",
]

[dependency-groups]
dev = [
    "mkdocs-material>=9.6.7",
    "pre-commit>=4.2.0",
    "pyright>=1.1.393",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "ruff>=0.9.4",
]

# ###############
# UV
# ###############
[tool.uv.sources]
interloper = { workspace = true }
interloper-assets = { workspace = true }
interloper-duckdb = { workspace = true }
interloper-google-cloud = { workspace = true }
interloper-pandas = { workspace = true }
interloper-sql = { workspace = true }
interloper-sqlite = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]

# ###############
# PYRIGHT
# ###############
[tool.pyright]
typeCheckingMode = "basic"
reportMissingParameterType = true
ignore = ["**/tests/**"]

# ###############
# RUFF
# ###############
[tool.ruff]
target-version = "py310"
line-length = 120
exclude = ["libs/**"]

[tool.ruff.lint]
extend-select = ["E", "I", "UP", "ANN001", "ANN201", "ANN202"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**" = ["ANN"]

# ###############
# PYTEST
# ###############
[tool.pytest.ini_options]
markers = ["integration", "functional"]
addopts = ["--import-mode=importlib", "-m not functional"]

# ###############
# COVERAGE
# ###############
[tool.coverage.report]
include = ["packages/**/src/**"]
exclude_also = [
    # Don't complain about missing debug-only code:
    # "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
