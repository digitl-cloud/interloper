{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Interloper is an open-source Python data asset framework that makes defining, configuring and materializing data assets effortless. It combines the flexibility of a very lightweight python library with powerful execution features inspired by modern orchestrators.</p>"},{"location":"#interloper","title":"Interloper","text":""},{"location":"#the-ultra-portable-data-asset-framework","title":"The ultra-portable data asset framework","text":""},{"location":"#core-concepts","title":"Core concepts","text":"<ul> <li>Everything is an asset \u2013 In Interloper, an asset is a first-class entity. It produces data, which is then materialized independently. The framework provides a simple, structured way to define assets without unnecessary complexity.  </li> <li>Flexible IO-based materialization \u2013 Asset materialization is driven by IO configuration, completely separate from how the data is produced. This allows for clean, flexible execution.</li> <li>Framework-agnostic data outputs \u2013 Interloper does not enforce metadata dependencies on destinations. Your data is written and mutated in a deterministic, transparent way, ensuring full control over your pipelines.  </li> </ul>"},{"location":"#features","title":"Features","text":"<p>\u2714 Asset &amp; source definition \u2013 Define structured, reusable data assets. \u2714 Multi-IO materialization \u2013 Materialize data to multiple destinations with ease. \u2714 Schema definition \u2013 Enforce and validate data structures. \u2714 Upstream asset dependencies \u2013 Build logical relationships between assets. \u2714 Data validation \u2013 Ensure data integrity before and during materialization. \u2714 Partitioning &amp; backfilling \u2013 Efficiently process and reprocess historical data. </p> <ul> <li> DuckDB     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> PostgreSQL     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> MySQL     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> BigQuery     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Google Cloud Storage     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> </ul> <ul> <li> Adservice     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Adup     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Amazon Ads     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Amazon Selling Partner     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Awin     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Bing Ads     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Campaign Manager 360     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Criteo     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Display Video 360     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Facebook Ads     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Facebook Insights     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Google Ads     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Impact     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Instagram Insights     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Linkedin Ads     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Linkedin Organic     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Pinterest Ads     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Search Ads 360     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Search Console     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Snapchat Ads     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Teads     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> Thetradedesk     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> <li> TikTok Ads     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor</li> </ul>"},{"location":"#integrations","title":"Integrations","text":"<p>You can easily extend Interloper with our additional libraries.</p>"},{"location":"#asset-library","title":"Asset Library","text":"<p>Alongside Interloper, we maintain a pre-built collection of assets that pull data from well-known platforms\u2014ranging from social media to digital marketing and beyond. These ready-to-use assets help you bootstrap your data stack instantly without reinventing the wheel.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#why-another-data-framework","title":"Why another data framework?","text":"<p>Because the existing ones are either too opinionated, too bloated, or just don\u2019t get out of your way.</p> <ul> <li>ETL tools force rigid workflows.</li> <li>Orchestration frameworks overcomplicate simple jobs.</li> <li>DIY pipelines break the moment your schema changes.</li> </ul> <p>Interloper sits in between:</p> <ul> <li>Simple when you want it: write a function, materialize an asset.</li> <li>Powerful when you need it: define dependencies, automatically reconcile schemas, partitioning and backfill strategies, etc.</li> </ul> <p>Interloper essentially positions itself as an alternative to DLT, while being simpler and yet more powerful on several aspects. In terms of concepts and design, Interloper draws a lot of inspiration from Dagster.</p>"},{"location":"getting-started/","title":"Getting started","text":"<pre><code>pip install interloper\n</code></pre> <pre><code>@source\ndef my_source() -&gt; Sequence[Asset]:\n    @asset\n    def my_asset_A() -&gt; str:\n        return \"A\"\n\n    @asset\n    def my_asset_B() -&gt; str:\n        return \"B\"\n\n    return (my_asset_A, my_asset_B)\n\nmy_source.io ={\"file\": interloper.io.FileIO(\"./data\")}\n\nPipeline.materialize(my_source)\n</code></pre>"},{"location":"home/","title":"Home","text":"<p>template: home.html title: Interloper</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#your-first-asset","title":"Your first asset","text":"<p>At the most basic level, an <code>asset</code> is simply a function that returns data. Any kind of data, whether it's a string, a list of dictionaries, a Pandas dataframe, etc.</p> <p>Let's create our first asset that pulls today's Berlin weather forecast data from Open Meteo:</p> <pre><code>import datetime as dt\nimport interloper as interloper\n\n@interloper.asset\ndef forecast():\n    url = \"https://historical-forecast-api.open-meteo.com/v1/forecast\"\n    params = {\n        \"latitude\": 52.5244,\n        \"longitude\": 13.4105,\n        \"start_date\": dt.date.today().isoformat(),\n        \"end_date\": dt.date.today().isoformat(),\n        \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"dew_point_2m\", \"precipitation\", \"wind_speed_10m\"],\n    }\n    response = client.get(url, params=params)\n    data = response.json()[\"hourly\"]\n    return data\n</code></pre> <p>We can execute our asset using: <pre><code>forecast.run()\n</code></pre></p> <p>Note</p> <p>Calling the asset with <code>forecast()</code> does not execute it but instead returns a parameterized copy. With Interloper, the execution of assets and resolution of parameters is deferred. This concept will be covered in the rest of this documentation.</p>"},{"location":"tutorial/#adding-parameters","title":"Adding parameters","text":"<p>An asset can be parameterized like a normal function.</p> <p>Let's add a parameter to our <code>forecast</code> asset.</p> <pre><code>@interloper.asset\ndef forecast(\n    date: dt.date,\n):\n    url = \"https://historical-forecast-api.open-meteo.com/v1/forecast\"\n    params = {\n        \"latitude\": 52.5244,\n        \"longitude\": 13.4105,\n        \"start_date\": date.isoformat(),\n        \"end_date\": date.isoformat(),\n        \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"dew_point_2m\", \"precipitation\", \"wind_speed_10m\"],\n    }\n    response = client.get(url, params=params)\n    data = response.json()[\"hourly\"]\n    return data\n</code></pre> <p>To execute the asset, keyword arguments are required:</p> <pre><code>forecast.run(date=dt.date.today())\n</code></pre>"},{"location":"tutorial/#materialization","title":"Materialization","text":"<p>So far, nothing too exciting. Interloper's starts to make sense when we introduce the concept of materialization.</p> <p>An asset can materialized, meaning that, based on an <code>IO</code> configuration, it can be written to  and read from somewhere.</p> <p>Interloper ships with many <code>IO</code> managers out of the box allowing assets to be materialized to a wide range of destinations.</p> <p>Let's add an <code>IO</code> config to our asset using <code>FileIO</code>, which simply pickles the data on the filesystem:</p> <pre><code>@interloper.asset\ndef forecast(date: dt.date):\n    [...]\n\nforecast.io = {\"file\": interloper.io.FileIO(\"./data\")}\n</code></pre> <p>We can now materialize our asset:</p> <pre><code>forecast.materialize()\n</code></pre> <p>The materialization will handle the execution of the asset and save the data as a pickle file under <code>./data/forecast</code>.</p>"},{"location":"tutorial/#defining-a-source","title":"Defining a source","text":"<p>Pulling data from a data source isn't typically limited to a single asset. We might for example fetch data from several API endpoints, while reusing common pieces of configuration or sharing an HTTP client.</p> <p>Interloper allows you to define <code>sources</code>, which are essentially a collection of assets.</p> <p>Let's now create an <code>open_meteo</code> source and add a second asset to it. We will take the opportunity to move at the source level the logic shared between assets</p> <pre><code>@interloper.source\ndef open_meteo():\n    client = httpx.Client(\n        params={\n            \"latitude\": 52.5244,\n            \"longitude\": 13.4105,\n        },\n    )\n\n    def to_records(data: dict):\n        return [dict(zip(data.keys(), values)) for values in zip(*data.values())]\n\n    @interloper.asset\n    def forecast(date: dt.date):\n        url = \"https://historical-forecast-api.open-meteo.com/v1/forecast\"\n        params = {\n            \"start_date\": start_date.isoformat(),\n            \"end_date\": end_date.isoformat(),\n            \"hourly\": [\"temperature_2m\", \"relative_humidity_2m\", \"dew_point_2m\", \"precipitation\", \"wind_speed_10m\"],\n        }\n        response = client.get(url, params=params)\n        data = response.json()[\"hourly\"]\n        return to_records(data)\n\n    @interloper.asset\n    def air_quality(date: dt.date):\n        url = \"https://air-quality-api.open-meteo.com/v1/air-quality\"\n        params = {\n            \"start_date\": start_date.isoformat(),\n            \"end_date\": end_date.isoformat(),\n            \"hourly\": [\"pm10\", \"pm2_5\", \"dust\", \"uv_index\"],\n        }\n        response = client.get(url, params=params)\n        data = response.json()[\"hourly\"]\n        return to_records(data)\n\n    return (forecast, air_quality)\n</code></pre> <p>When a <code>source</code> is defined, its assets are exposed as attributes. Therefore, we can still run or materialize asset using:</p> <p><pre><code>open_meteo.forecast.run(date=dt.date.today())\n</code></pre> or <pre><code>open_meteo.air_quality.materialize(date=dt.date.today())\n</code></pre></p>"},{"location":"tutorial/#pipeline","title":"Pipeline","text":"<p>TODO</p> <p>Any execution that runs and materializes more than one asset requires a <code>pipeline</code></p> <pre><code>pipeline = interloper.Pipeline(open_meteo)\npipeline.materialize()\n</code></pre>"},{"location":"tutorial/#binding-parameters","title":"Binding parameters","text":"<p>Until now, we've been executing the original definition of assets directly. However, a basic requirement would be to reuse the same definition of a source or asset but with different configurations.</p> <p>For example, we might want to use different account IDs or API keys, or here in the case of our <code>open_meteo</code> source, different coordinates.</p> <p>Let's start by allowing the coordinates to be passed as parameters:</p> <pre><code>@interloper.source\ndef open_meteo(\n    lat: float = 52.5244,\n    lon: float = 13.4105,\n) -&gt; Sequence[Asset]:\n    ...\n</code></pre> <p>Warning</p> <p>A <code>source</code> parameter requires a default value.</p> <p>Then, calling our source with different parameters values will return a copy with bound parameters.</p> <pre><code>open_meteo_paris = open_meteo(lat=48.8566, lon=2.3522)\ninterloper.Pipeline(open_meteo_paris).materialize()\n</code></pre>"},{"location":"tutorial/#partitioning-backfilling","title":"Partitioning &amp; Backfilling","text":"<p>TODO</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/10/11/my-first-blog-post/","title":"My first blog post","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec maximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula erat, ut egestas tellus eros at risus. In hac habitasse platea dictumst. Phasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris Nam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in sem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac metus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.</p> <p>Donec volutpat, elit ac volutpat laoreet, turpis dolor semper nibh, et dictum massa ex pulvinar elit. Curabitur commodo sit amet dolor sed mattis. Etiam tempor odio eu nisi gravida cursus. Maecenas ante enim, fermentum sit amet molestie nec, mollis ac libero. Vivamus sagittis suscipit eros ut luctus.</p> <p>Nunc vehicula sagittis condimentum. Cras facilisis bibendum lorem et feugiat. In auctor accumsan ligula, at consectetur erat commodo quis. Morbi ac nunc pharetra, pellentesque risus in, consectetur urna. Nulla id enim facilisis arcu tincidunt pulvinar. Vestibulum laoreet risus scelerisque porta congue. In velit purus, dictum quis neque nec, molestie viverra risus. Nam pellentesque tellus id elit ultricies, vel finibus erat cursus.</p>"},{"location":"blog/2023/10/11/my-first-blog-post/","title":"My first blog post","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec maximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula erat, ut egestas tellus eros at risus. In hac habitasse platea dictumst. Phasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris Nam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in sem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac metus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.</p> <p>Donec volutpat, elit ac volutpat laoreet, turpis dolor semper nibh, et dictum massa ex pulvinar elit. Curabitur commodo sit amet dolor sed mattis. Etiam tempor odio eu nisi gravida cursus. Maecenas ante enim, fermentum sit amet molestie nec, mollis ac libero. Vivamus sagittis suscipit eros ut luctus.</p> <p>Nunc vehicula sagittis condimentum. Cras facilisis bibendum lorem et feugiat. In auctor accumsan ligula, at consectetur erat commodo quis. Morbi ac nunc pharetra, pellentesque risus in, consectetur urna. Nulla id enim facilisis arcu tincidunt pulvinar. Vestibulum laoreet risus scelerisque porta congue. In velit purus, dictum quis neque nec, molestie viverra risus. Nam pellentesque tellus id elit ultricies, vel finibus erat cursus.</p>"},{"location":"features/backfilling/","title":"Backfilling","text":""},{"location":"features/backfilling/#multi-run","title":"Multi run","text":"<pre><code>@source\ndef my_source() -&gt; Sequence[Asset]:\n    @asset(\n        partitioning=TimePartitionConfig(column=\"date\"),\n    )\n    def my_asset(\n        date: dt.date = Date(),\n    ) -&gt; str:\n        return \"hello\"\n\n    return (my_asset,)\n\n\nmy_source.io = {\"file\": FileIO(\"data\")}\n\nPipeline(my_source).backfill(\n    partitions=TimePartitionWindow(\n        start=dt.date.today() - dt.timedelta(days=3),\n        end=dt.date.today() - dt.timedelta(days=1),\n    )\n)\n</code></pre>"},{"location":"features/backfilling/#single-run","title":"Single run","text":"<pre><code>@source\ndef my_source() -&gt; Sequence[Asset]:\n    @asset(\n        partitioning=TimePartitionConfig(column=\"date\", allow_window=True),\n    )\n    def my_asset(\n        date_window: tuple[dt.date, dt.date] = DateWindow(),\n    ) -&gt; str:\n        return \"hello\"\n\n    return (my_asset,)\n\n\nmy_source.io = {\"file\": FileIO(\"data\")}\n\nPipeline(my_source).backfill(\n    partitions=TimePartitionWindow(\n        start=dt.date.today() - dt.timedelta(days=3),\n        end=dt.date.today() - dt.timedelta(days=1),\n    )\n)\n</code></pre>"},{"location":"features/basic/","title":"Basic","text":""},{"location":"features/basic/#functional-definition","title":"Functional definition","text":"<pre><code>@source\ndef my_source():\n    @asset\n    def my_asset_A():\n        return \"A\"\n\n    @asset\n    def my_asset_B():\n        return \"B\"\n\n    return (my_asset_A, my_asset_B)\n</code></pre>"},{"location":"features/basic/#object-oriented-definition","title":"Object oriented definition","text":"<pre><code>class MyAssetA(Asset):\n    def data(self):\n        return \"A\"\n\nclass MyAssetB(Asset):\n    def data(self):\n        return \"B\"\n\nclass MySource(Source):\n    def asset_definitions(self):\n        return (\n            MyAssetA(\"my_asset_A\"),\n            MyAssetB(\"my_asset_B\"),\n        )\n\nmy_source = MySource(\"my_source\")\n</code></pre>"},{"location":"features/basic/#parameters","title":"Parameters","text":"<pre><code>@asset\ndef my_asset(who: str = \"world\"):\n    return f\"hello {world}\"\n</code></pre>"},{"location":"features/basic/#running-an-asset","title":"Running an asset","text":"<pre><code>my_asset.run(who=\"you\")\n</code></pre>"},{"location":"features/data-validation/","title":"Data Validation","text":""},{"location":"features/data-validation/#assets-data-type","title":"Asset's data type","text":"<pre><code>@asset\ndef my_asset() -&gt; str:\n    return 123\n</code></pre> <pre><code>TypeError: Asset my_asset_A returned data of type int, expected str\n</code></pre>"},{"location":"features/data-validation/#upstream-assetss-data-type","title":"Upstream assets's data type","text":"<pre><code>@source\ndef my_source():\n    @asset(name=\"A\")\n    def my_asset_A() -&gt; str:\n        return \"A\"\n\n    @asset(name=\"B\")\n    def my_asset_B(\n        a = UpstreamAsset(\"A\", type=int),\n    ) -&gt; str:\n        return \"B\"\n</code></pre> <pre><code>TypeError: Expected data of type int from upstream asset B, but got str\n</code></pre>"},{"location":"features/data-validation/#typedio-data-materialization","title":"<code>TypedIO</code> data materialization","text":"<p>TODO</p>"},{"location":"features/io/","title":"IO","text":"<pre><code>@source\ndef my_source():\n    @asset\n    def my_asset():\n        return \"hello\"\n\n    return (my_asset_A,)\n</code></pre>"},{"location":"features/io/#simple-io","title":"Simple IO","text":"<pre><code>my_source = my_source(io={\"file\": FileIO(\"./data\")})\n\nPipeline(my_source).materialize()\n</code></pre>"},{"location":"features/io/#multiple-io","title":"Multiple IO","text":"<pre><code>my_source = my_source(\n    io={\n        \"duckdb\": DuckDBDataframeIO(\"data/duck.db\"),\n        \"sqlite\": SQLiteDataframeIO(\"data/sqlite.db\"),\n    },\n    default_io_key = \"duckdb\",\n)\n\nPipeline(my_source).materialize()\n</code></pre>"},{"location":"features/partitioning/","title":"Partitioning","text":""},{"location":"features/partitioning/#time-partitioning","title":"Time partitioning","text":"<pre><code>@source\ndef my_source() -&gt; Sequence[Asset]:\n    @asset(\n        partitioning=TimePartitionConfig(column=\"date\"),\n    )\n    def my_asset_A(\n        date: dt.date = Date(),\n    ) -&gt; str:\n        return \"A\"\n\n    @asset(\n        partitioning=TimePartitionConfig(column=\"date\", allow_window=True),\n    )\n    def my_asset_B(\n        date_window: tuple[dt.date, dt.date] = DateWindow(),\n    ) -&gt; str:\n        return \"B\"\n\n    return (my_asset_A,)\n\n\nmy_source.io = {\"file\": FileIO(\"data\")}\n\nPipeline(my_source).materialize(partition=TimePartition(dt.date.today()))\n</code></pre>"},{"location":"features/upstream-assets/","title":"Upstream assets","text":"<pre><code>@source\ndef my_source():\n    @asset(name=\"A\")\n    def my_asset_A():\n        return \"A\"\n\n    @asset(name=\"B\")\n    def my_asset_B(\n        a: str = UpstreamAsset(\"A\"),\n    ):\n        return \"B\"\n\n    @asset(name=\"C\")\n    def my_asset_C(\n        a: str = UpstreamAsset(\"custom_ref_A\"),\n        b: str = UpstreamAsset(\"custom_ref_B\"),\n    ):\n        return \"C\"\n\n    return (my_asset_A, my_asset_B, my_asset_C)\n\n\nmy_source.io = {\"file\": FileIO(\"data\")}\n\nmy_source.C.deps = {\n    \"custom_ref_A\": \"A\",\n    \"custom_ref_B\": \"B\",\n}\n\nPipeline(my_source).materialize()\n</code></pre> <p>Note</p> <p>Note how the upstream assets's refs of <code>my_asset_C</code> do not match the name of their corresponding asset (e.g. <code>custom_ref_A</code> \u2260 <code>A</code>). Therefore, the <code>deps</code> config of <code>my_asset_C</code> has to be defined manually, mapping an upstream key to its corresponding asset.</p>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/meta/","title":"meta","text":""}]}